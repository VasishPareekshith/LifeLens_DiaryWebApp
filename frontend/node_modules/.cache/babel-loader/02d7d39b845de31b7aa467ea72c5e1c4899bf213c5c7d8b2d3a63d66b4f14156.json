{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VASISH1211\\\\Desktop\\\\LifeLens\\\\frontend\\\\src\\\\components\\\\ViewData.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Diary from \"../assets/opendiary2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewData = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date()); // Initialize with current date\n  const [textValue, setTextValue] = useState(''); // State to hold text data from the database\n  const [imageUrl, setImageUrl] = useState(''); // State to hold the image URL from the database\n\n  // Function to handle date change\n  const handleDateChange = event => {\n    const newDate = new Date(event.target.value);\n    setSelectedDate(newDate);\n\n    // Fetch data from the database based on the selected date\n    fetchDataByDate(newDate.toISOString().substr(0, 10)); // Send date in YYYY-MM-DD format\n  };\n\n  // Fetch data from the backend when the date changes\n  const fetchDataByDate = async date => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/diary/get-entry?date=${date}`);\n\n      // Assuming the response data contains 'content' and 'imageUrl'\n      const {\n        content,\n        imageUrl\n      } = response.data;\n      setTextValue(content || 'No content available for this date'); // If no content is found, show a default message\n      setImageUrl(imageUrl || ''); // If no image is found, clear the image URL\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setTextValue('Error fetching data'); // Error handling\n      setImageUrl(''); // Clear the image URL on error\n    }\n  };\n\n  // Automatically fetch the data for the current date when the component mounts\n  useEffect(() => {\n    fetchDataByDate(selectedDate.toISOString().substr(0, 10));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '93%',\n        height: '60px',\n        display: 'flex',\n        marginLeft: '50px',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Select a Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate.toISOString().substr(0, 10),\n        onChange: handleDateChange,\n        style: {\n          padding: '5px',\n          borderRadius: '5px',\n          border: '1px solid #ccc'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '803px',\n        height: '552.5px',\n        margin: 'auto',\n        padding: '20px',\n        backgroundImage: `url(${Diary})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '44%',\n            height: '510px',\n            marginLeft: '50px',\n            backgroundColor: 'transparent',\n            padding: '10px',\n            overflowY: 'auto' // Enable scrolling if content overflows\n          },\n          children: imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: \"Diary entry\",\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No image available for this date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '47%',\n            height: '500px',\n            marginTop: '5px',\n            marginRight: '5px',\n            backgroundColor: 'transparent',\n            padding: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              height: '102%',\n              width: '100%',\n              padding: '10px',\n              border: 'none',\n              outline: 'none',\n              resize: 'none',\n              boxSizing: 'border-box',\n              backgroundColor: 'transparent'\n            },\n            value: textValue,\n            readOnly: true // Make the text area read-only\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(ViewData, \"mXqbLjnOHFb029jhETBdhiBUZGo=\");\n_c = ViewData;\nexport default ViewData;\nvar _c;\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"names":["React","useState","useEffect","axios","Diary","jsxDEV","_jsxDEV","ViewData","_s","selectedDate","setSelectedDate","Date","textValue","setTextValue","imageUrl","setImageUrl","handleDateChange","event","newDate","target","value","fetchDataByDate","toISOString","substr","date","response","get","content","data","error","console","style","padding","children","width","height","display","marginLeft","justifyContent","alignItems","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","borderRadius","border","margin","backgroundImage","backgroundPosition","backgroundSize","backgroundColor","overflowY","src","alt","marginBottom","marginTop","outline","resize","boxSizing","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/VASISH1211/Desktop/LifeLens/frontend/src/components/ViewData.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Diary from \"../assets/opendiary2.png\";\r\n\r\nconst ViewData = () => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date()); // Initialize with current date\r\n    const [textValue, setTextValue] = useState(''); // State to hold text data from the database\r\n    const [imageUrl, setImageUrl] = useState(''); // State to hold the image URL from the database\r\n\r\n    // Function to handle date change\r\n    const handleDateChange = (event) => {\r\n        const newDate = new Date(event.target.value);\r\n        setSelectedDate(newDate);\r\n\r\n        // Fetch data from the database based on the selected date\r\n        fetchDataByDate(newDate.toISOString().substr(0, 10)); // Send date in YYYY-MM-DD format\r\n    };\r\n\r\n    // Fetch data from the backend when the date changes\r\n    const fetchDataByDate = async (date) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/diary/get-entry?date=${date}`);\r\n            \r\n            // Assuming the response data contains 'content' and 'imageUrl'\r\n            const { content, imageUrl } = response.data;\r\n            \r\n            setTextValue(content || 'No content available for this date'); // If no content is found, show a default message\r\n            setImageUrl(imageUrl || ''); // If no image is found, clear the image URL\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n            setTextValue('Error fetching data'); // Error handling\r\n            setImageUrl(''); // Clear the image URL on error\r\n        }\r\n    };\r\n\r\n    // Automatically fetch the data for the current date when the component mounts\r\n    useEffect(() => {\r\n        fetchDataByDate(selectedDate.toISOString().substr(0, 10));\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ padding: '20px' }}>\r\n            <div\r\n                style={{\r\n                    width: '93%',\r\n                    height: '60px',\r\n                    display: 'flex',\r\n                    marginLeft: '50px',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <label style={{ marginRight: '10px' }}>Select a Date:</label>\r\n                <input\r\n                    type=\"date\"\r\n                    value={selectedDate.toISOString().substr(0, 10)}\r\n                    onChange={handleDateChange}\r\n                    style={{ padding: '5px', borderRadius: '5px', border: '1px solid #ccc' }}\r\n                />\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    width: '803px',\r\n                    height: '552.5px',\r\n                    margin: 'auto',\r\n                    padding: '20px',\r\n                    backgroundImage: `url(${Diary})`,\r\n                    backgroundPosition: 'center',\r\n                    backgroundSize: 'cover',\r\n                }}\r\n            >\r\n                {/* Container for Left and Right Divs */}\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    {/* Left Div for Image */}\r\n                    <div\r\n                        style={{\r\n                            width: '44%',\r\n                            height: '510px',\r\n                            marginLeft: '50px',\r\n                            backgroundColor: 'transparent',\r\n                            padding: '10px',\r\n                            overflowY: 'auto', // Enable scrolling if content overflows\r\n                        }}\r\n                    >\r\n                        {/* Show the image fetched from the database */}\r\n                        {imageUrl ? (\r\n                            <img src={imageUrl} alt=\"Diary entry\" style={{ width: '100%', marginBottom: '10px' }} />\r\n                        ) : (\r\n                            <p>No image available for this date</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Right Div for Text Area */}\r\n                    <div\r\n                        style={{\r\n                            width: '47%',\r\n                            height: '500px',\r\n                            marginTop: '5px',\r\n                            marginRight: '5px',\r\n                            backgroundColor: 'transparent',\r\n                            padding: '10px',\r\n                        }}\r\n                    >\r\n                        {/* Display the text data fetched from the database */}\r\n                        <textarea\r\n                            style={{\r\n                                height: '102%',\r\n                                width: '100%',\r\n                                padding: '10px',\r\n                                border: 'none',\r\n                                outline: 'none',\r\n                                resize: 'none',\r\n                                boxSizing: 'border-box',\r\n                                backgroundColor: 'transparent',\r\n                            }}\r\n                            value={textValue}\r\n                            readOnly  // Make the text area read-only\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}