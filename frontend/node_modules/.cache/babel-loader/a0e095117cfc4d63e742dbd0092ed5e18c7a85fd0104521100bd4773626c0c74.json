{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VASISH1211\\\\Desktop\\\\PROJ\\\\LifeLens\\\\frontend\\\\src\\\\components\\\\Cards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewData = () => {\n  _s();\n  const [entries, setEntries] = useState([]); // State to hold fetched entries\n  const [dateList, setDateList] = useState([]); // List of consecutive dates\n  const [loading, setLoading] = useState(false); // State to handle loading\n  const [hasMore, setHasMore] = useState(true); // Flag to check if more entries are available\n\n  // Generate consecutive dates starting from today and moving backwards\n  useEffect(() => {\n    const today = new Date();\n    const dates = Array.from({\n      length: 10\n    }, (_, i) => {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i); // Go backwards by 'i' days from today\n      return date.toISOString().substr(0, 10);\n    });\n    setDateList(dates);\n    console.log(\"Date List:\", dates); // Debugging: log dateList\n  }, []);\n\n  // Function to fetch data by date and email\n  const fetchDataByDateAndEmail = async (entryDate, email) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/diary/get-entry`, {\n        params: {\n          entryDate,\n          email\n        }\n      });\n      console.log(response.data); // Check if imageUrl is present in the response\n\n      return {\n        date: entryDate,\n        imageUrl: response.data.imageUrl || null // Make sure this matches your API response\n      };\n    } catch (error) {\n      console.error(`Error fetching data for ${entryDate}:`, error);\n      return {\n        date: entryDate,\n        imageUrl: null\n      }; // Return null imageUrl on error\n    }\n  };\n\n  // Load data for each date in dateList\n  const loadEntries = async () => {\n    if (loading || !hasMore) return; // Prevent concurrent requests\n    setLoading(true);\n    const email = localStorage.getItem(\"email\");\n    console.log(`Fetching entries for email: ${email}`); // Debugging: log the email\n\n    try {\n      const fetchedEntries = await Promise.all(dateList.map(date => fetchDataByDateAndEmail(date, email)));\n      console.log(\"Fetched Entries:\", fetchedEntries); // Debugging: log fetched entries\n\n      const validEntries = fetchedEntries.filter(entry => entry.imageUrl); // Filter out empty entries\n\n      if (validEntries.length === 0) {\n        setHasMore(false); // No more data to load\n      } else {\n        setEntries(prevEntries => [...prevEntries, ...validEntries]);\n      }\n    } catch (error) {\n      console.error(\"Error loading entries:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Automatically load entries when the component mounts\n  useEffect(() => {\n    loadEntries();\n  }, [dateList]); // Load entries when dateList changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"90%\",\n      margin: \"0 auto\",\n      paddingTop: \"20px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: loadEntries,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          margin: \"20px 0\"\n        },\n        children: \"Loading ...\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\"\n        },\n        children: entries.map((entry, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: \"1px solid #ddd\",\n            borderRadius: \"10px\",\n            width: \"200px\",\n            margin: \"10px\",\n            textAlign: \"center\",\n            boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\"\n          },\n          children: [entry.imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: entry.imageUrl,\n            alt: `Diary entry for ${entry.date}`,\n            style: {\n              width: \"100%\",\n              borderTopLeftRadius: \"10px\",\n              borderTopRightRadius: \"10px\",\n              padding: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"20px\",\n              color: \"#888\"\n            },\n            children: \"No image available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"10px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              style: {\n                margin: \"10px 0\",\n                fontSize: \"1.1em\"\n              },\n              children: entry.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, entry.date + i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewData, \"RlE8i64bEKljGTBee8vWAsflBYw=\");\n_c = ViewData;\nexport default ViewData;\nvar _c;\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"names":["React","useState","useEffect","InfiniteScroll","axios","jsxDEV","_jsxDEV","ViewData","_s","entries","setEntries","dateList","setDateList","loading","setLoading","hasMore","setHasMore","today","Date","dates","Array","from","length","_","i","date","setDate","getDate","toISOString","substr","console","log","fetchDataByDateAndEmail","entryDate","email","response","get","params","data","imageUrl","error","loadEntries","localStorage","getItem","fetchedEntries","Promise","all","map","validEntries","filter","entry","prevEntries","style","width","margin","paddingTop","children","pageStart","loadMore","loader","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","justifyContent","border","borderRadius","boxShadow","src","alt","borderTopLeftRadius","borderTopRightRadius","padding","color","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/VASISH1211/Desktop/PROJ/LifeLens/frontend/src/components/Cards.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport axios from \"axios\";\r\n\r\nconst ViewData = () => {\r\n  const [entries, setEntries] = useState([]); // State to hold fetched entries\r\n  const [dateList, setDateList] = useState([]); // List of consecutive dates\r\n  const [loading, setLoading] = useState(false); // State to handle loading\r\n  const [hasMore, setHasMore] = useState(true); // Flag to check if more entries are available\r\n\r\n  // Generate consecutive dates starting from today and moving backwards\r\n  useEffect(() => {\r\n    const today = new Date();\r\n    const dates = Array.from({ length: 10 }, (_, i) => {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() - i); // Go backwards by 'i' days from today\r\n      return date.toISOString().substr(0, 10);\r\n    });\r\n    setDateList(dates);\r\n    console.log(\"Date List:\", dates); // Debugging: log dateList\r\n  }, []);\r\n\r\n  // Function to fetch data by date and email\r\n  const fetchDataByDateAndEmail = async (entryDate, email) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/diary/get-entry`, {\r\n        params: { entryDate, email },\r\n      });\r\n      console.log(response.data); // Check if imageUrl is present in the response\r\n\r\n      return {\r\n        date: entryDate,\r\n        imageUrl: response.data.imageUrl || null, // Make sure this matches your API response\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(`Error fetching data for ${entryDate}:`, error);\r\n      return { date: entryDate, imageUrl: null }; // Return null imageUrl on error\r\n    }\r\n  };\r\n\r\n  // Load data for each date in dateList\r\n  const loadEntries = async () => {\r\n    if (loading || !hasMore) return; // Prevent concurrent requests\r\n    setLoading(true);\r\n\r\n    const email = localStorage.getItem(\"email\");\r\n    console.log(`Fetching entries for email: ${email}`); // Debugging: log the email\r\n\r\n    try {\r\n      const fetchedEntries = await Promise.all(\r\n        dateList.map((date) => fetchDataByDateAndEmail(date, email))\r\n      );\r\n\r\n      console.log(\"Fetched Entries:\", fetchedEntries); // Debugging: log fetched entries\r\n\r\n      const validEntries = fetchedEntries.filter(entry => entry.imageUrl); // Filter out empty entries\r\n\r\n      if (validEntries.length === 0) {\r\n        setHasMore(false); // No more data to load\r\n      } else {\r\n        setEntries((prevEntries) => [...prevEntries, ...validEntries]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading entries:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Automatically load entries when the component mounts\r\n  useEffect(() => {\r\n    loadEntries();\r\n  }, [dateList]); // Load entries when dateList changes\r\n\r\n  return (\r\n    <div style={{ width: \"90%\", margin: \"0 auto\", paddingTop: \"20px\" }}>\r\n      <InfiniteScroll\r\n        pageStart={0}\r\n        loadMore={loadEntries}\r\n        hasMore={hasMore}\r\n        loader={\r\n          <div style={{ textAlign: \"center\", margin: \"20px 0\" }} key={0}>\r\n            Loading ...\r\n          </div>\r\n        }\r\n      >\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\r\n          {entries.map((entry, i) => (\r\n            <div\r\n              key={entry.date + i}\r\n              style={{\r\n                border: \"1px solid #ddd\",\r\n                borderRadius: \"10px\",\r\n                width: \"200px\",\r\n                margin: \"10px\",\r\n                textAlign: \"center\",\r\n                boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\r\n              }}\r\n            >\r\n              {entry.imageUrl ? (\r\n                <img\r\n                  src={entry.imageUrl}\r\n                  alt={`Diary entry for ${entry.date}`}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    borderTopLeftRadius: \"10px\",\r\n                    borderTopRightRadius: \"10px\",\r\n                    padding: \"10px\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                <div style={{ padding: \"20px\", color: \"#888\" }}>No image available</div>\r\n              )}\r\n              <div style={{ padding: \"10px\" }}>\r\n                <h5 style={{ margin: \"10px 0\", fontSize: \"1.1em\" }}>{entry.date}</h5>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}