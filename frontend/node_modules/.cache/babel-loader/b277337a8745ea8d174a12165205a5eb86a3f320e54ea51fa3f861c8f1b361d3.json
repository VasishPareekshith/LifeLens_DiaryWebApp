{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VASISH1211\\\\Desktop\\\\PROJ\\\\LifeLens\\\\frontend\\\\src\\\\components\\\\ViewData.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Diary from \"../assets/opendiary2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewData = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date()); // Initialize with current date\n  const [textValue, setTextValue] = useState(''); // State to hold text data from the database\n  const [imageUrl, setImageUrl] = useState(''); // State to hold the image URL from the database\n  const email = localStorage.getItem('email'); // Assuming email is stored in localStorage\n\n  // Function to handle date change\n  const handleDateChange = event => {\n    const newDate = new Date(event.target.value); // Always create a Date object\n    setSelectedDate(newDate);\n\n    // Fetch data from the database based on the selected date and email\n    fetchDataByDateAndEmail(newDate.toISOString().substr(0, 10), email);\n  };\n\n  // Fetch data from the backend when the date changes\n  const fetchDataByDateAndEmail = async (entryDate, email) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/diary/get-entry`, {\n        params: {\n          entryDate,\n          email\n        } // Send both date and email as query parameters\n      });\n\n      // Assuming the response data contains 'content' and 'imageUrl'\n      const {\n        content,\n        imageUrl\n      } = response.data;\n      setTextValue(content || 'No content available for this date'); // If no content is found, show a default message\n      setImageUrl(imageUrl || ''); // If no image is found, clear the image URL\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setTextValue('Error fetching data'); // Error handling\n      setImageUrl(''); // Clear the image URL on error\n    }\n  };\n\n  // Automatically fetch the data for the current date when the component mounts\n  useEffect(() => {\n    fetchDataByDateAndEmail(selectedDate.toISOString().substr(0, 10), email);\n  }, [email, selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      paddingTop: '100px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '93%',\n        height: '60px',\n        display: 'flex',\n        marginLeft: '50px',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          color: 'white',\n          marginRight: '10px'\n        },\n        children: \"Select Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate.toISOString().substr(0, 10),\n        onChange: handleDateChange,\n        style: {\n          padding: '5px',\n          borderRadius: '5px',\n          border: '1px solid #ccc'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '803px',\n        height: '552.5px',\n        margin: 'auto',\n        padding: '20px',\n        backgroundImage: `url(${Diary})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '44%',\n            height: '510px',\n            marginLeft: '50px',\n            backgroundColor: 'transparent',\n            padding: '10px',\n            overflowY: 'auto' // Enable scrolling if content overflows\n          },\n          children: imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: \"Diary entry\",\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No image available for this date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '47%',\n            height: '500px',\n            marginTop: '5px',\n            marginRight: '5px',\n            backgroundColor: 'transparent',\n            padding: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              height: '102%',\n              width: '100%',\n              padding: '10px',\n              border: 'none',\n              outline: 'none',\n              resize: 'none',\n              boxSizing: 'border-box',\n              backgroundColor: 'transparent'\n            },\n            value: textValue,\n            readOnly: true // Make the text area read-only\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(ViewData, \"mXqbLjnOHFb029jhETBdhiBUZGo=\");\n_c = ViewData;\nexport default ViewData;\nvar _c;\n$RefreshReg$(_c, \"ViewData\");","map":{"version":3,"names":["React","useState","useEffect","axios","Diary","jsxDEV","_jsxDEV","ViewData","_s","selectedDate","setSelectedDate","Date","textValue","setTextValue","imageUrl","setImageUrl","email","localStorage","getItem","handleDateChange","event","newDate","target","value","fetchDataByDateAndEmail","toISOString","substr","entryDate","response","get","params","content","data","error","console","style","padding","paddingTop","children","width","height","display","marginLeft","justifyContent","alignItems","color","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","borderRadius","border","margin","backgroundImage","backgroundPosition","backgroundSize","backgroundColor","overflowY","src","alt","marginBottom","marginTop","outline","resize","boxSizing","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/VASISH1211/Desktop/PROJ/LifeLens/frontend/src/components/ViewData.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Diary from \"../assets/opendiary2.png\";\n\nconst ViewData = () => {\n    const [selectedDate, setSelectedDate] = useState(new Date()); // Initialize with current date\n    const [textValue, setTextValue] = useState(''); // State to hold text data from the database\n    const [imageUrl, setImageUrl] = useState(''); // State to hold the image URL from the database\n    const email = localStorage.getItem('email'); // Assuming email is stored in localStorage\n\n    // Function to handle date change\n    const handleDateChange = (event) => {\n        const newDate = new Date(event.target.value);  // Always create a Date object\n        setSelectedDate(newDate);\n\n        // Fetch data from the database based on the selected date and email\n        fetchDataByDateAndEmail(newDate.toISOString().substr(0, 10), email);\n    };\n\n    // Fetch data from the backend when the date changes\n    const fetchDataByDateAndEmail = async (entryDate, email) => {\n        try {\n            const response = await axios.get(`http://localhost:5000/api/diary/get-entry`, {\n                params: { entryDate, email }  // Send both date and email as query parameters\n            });\n\n            // Assuming the response data contains 'content' and 'imageUrl'\n            const { content, imageUrl } = response.data;\n            \n            setTextValue(content || 'No content available for this date'); // If no content is found, show a default message\n            setImageUrl(imageUrl || ''); // If no image is found, clear the image URL\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            setTextValue('Error fetching data'); // Error handling\n            setImageUrl(''); // Clear the image URL on error\n        }\n    };\n\n    // Automatically fetch the data for the current date when the component mounts\n    useEffect(() => {\n        fetchDataByDateAndEmail(selectedDate.toISOString().substr(0, 10), email);\n    }, [email, selectedDate]);\n    \n    return (\n        <div style={{ padding: '20px' ,paddingTop: '100px' }}>\n            <div\n                style={{\n                    width: '93%',\n                    height: '60px',\n                    display: 'flex',\n                    marginLeft: '50px',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                <label style={{color:'white', marginRight:'10px'}}>Select Date:</label>&nbsp;\n                <input\n                    type=\"date\"\n                    value={selectedDate.toISOString().substr(0, 10)}\n                    onChange={handleDateChange}\n                    style={{ padding: '5px', borderRadius: '5px', border: '1px solid #ccc' }}\n                />\n            </div>\n\n            <div\n                style={{\n                    width: '803px',\n                    height: '552.5px',\n                    margin: 'auto',\n                    padding: '20px',\n                    backgroundImage: `url(${Diary})`,\n                    backgroundPosition: 'center',\n                    backgroundSize: 'cover',\n                }}\n            >\n                {/* Container for Left and Right Divs */}\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    {/* Left Div for Image */}\n                    <div\n                        style={{\n                            width: '44%',\n                            height: '510px',\n                            marginLeft: '50px',\n                            backgroundColor: 'transparent',\n                            padding: '10px',\n                            overflowY: 'auto', // Enable scrolling if content overflows\n                        }}\n                    >\n                        {/* Show the image fetched from the database */}\n                        {imageUrl ? (\n                            <img src={imageUrl} alt=\"Diary entry\" style={{ width: '100%', marginBottom: '10px' }} />\n                        ) : (\n                            <p>No image available for this date</p>\n                        )}\n                    </div>\n\n                    {/* Right Div for Text Area */}\n                    <div\n                        style={{\n                            width: '47%',\n                            height: '500px',\n                            marginTop: '5px',\n                            marginRight: '5px',\n                            backgroundColor: 'transparent',\n                            padding: '10px',\n                        }}\n                    >\n                        {/* Display the text data fetched from the database */}\n                        <textarea\n                            style={{\n                                height: '102%',\n                                width: '100%',\n                                padding: '10px',\n                                border: 'none',\n                                outline: 'none',\n                                resize: 'none',\n                                boxSizing: 'border-box',\n                                backgroundColor: 'transparent',\n                            }}\n                            value={textValue}\n                            readOnly  // Make the text area read-only\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ViewData;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,OAAO,GAAG,IAAIV,IAAI,CAACS,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;IAC/Cb,eAAe,CAACW,OAAO,CAAC;;IAExB;IACAG,uBAAuB,CAACH,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEV,KAAK,CAAC;EACvE,CAAC;;EAED;EACA,MAAMQ,uBAAuB,GAAG,MAAAA,CAAOG,SAAS,EAAEX,KAAK,KAAK;IACxD,IAAI;MACA,MAAMY,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,2CAA2C,EAAE;QAC1EC,MAAM,EAAE;UAAEH,SAAS;UAAEX;QAAM,CAAC,CAAE;MAClC,CAAC,CAAC;;MAEF;MACA,MAAM;QAAEe,OAAO;QAAEjB;MAAS,CAAC,GAAGc,QAAQ,CAACI,IAAI;MAE3CnB,YAAY,CAACkB,OAAO,IAAI,oCAAoC,CAAC,CAAC,CAAC;MAC/DhB,WAAW,CAACD,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CpB,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC;MACrCE,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB;EACJ,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACZsB,uBAAuB,CAACf,YAAY,CAACgB,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEV,KAAK,CAAC;EAC5E,CAAC,EAAE,CAACA,KAAK,EAAEP,YAAY,CAAC,CAAC;EAEzB,oBACIH,OAAA;IAAK6B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACjDhC,OAAA;MACI6B,KAAK,EAAE;QACHI,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,MAAM;QAClBC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MAChB,CAAE;MAAAN,QAAA,gBAEFhC,OAAA;QAAO6B,KAAK,EAAE;UAACU,KAAK,EAAC,OAAO;UAAEC,WAAW,EAAC;QAAM,CAAE;QAAAR,QAAA,EAAC;MAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,QACvE,eAAA5C,OAAA;QACI6C,IAAI,EAAC,MAAM;QACX5B,KAAK,EAAEd,YAAY,CAACgB,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAE;QAChD0B,QAAQ,EAAEjC,gBAAiB;QAC3BgB,KAAK,EAAE;UAAEC,OAAO,EAAE,KAAK;UAAEiB,YAAY,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAiB;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAEN5C,OAAA;MACI6B,KAAK,EAAE;QACHI,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,SAAS;QACjBe,MAAM,EAAE,MAAM;QACdnB,OAAO,EAAE,MAAM;QACfoB,eAAe,EAAE,OAAOpD,KAAK,GAAG;QAChCqD,kBAAkB,EAAE,QAAQ;QAC5BC,cAAc,EAAE;MACpB,CAAE;MAAApB,QAAA,eAGFhC,OAAA;QAAK6B,KAAK,EAAE;UAAEM,OAAO,EAAE,MAAM;UAAEE,cAAc,EAAE;QAAgB,CAAE;QAAAL,QAAA,gBAE7DhC,OAAA;UACI6B,KAAK,EAAE;YACHI,KAAK,EAAE,KAAK;YACZC,MAAM,EAAE,OAAO;YACfE,UAAU,EAAE,MAAM;YAClBiB,eAAe,EAAE,aAAa;YAC9BvB,OAAO,EAAE,MAAM;YACfwB,SAAS,EAAE,MAAM,CAAE;UACvB,CAAE;UAAAtB,QAAA,EAGDxB,QAAQ,gBACLR,OAAA;YAAKuD,GAAG,EAAE/C,QAAS;YAACgD,GAAG,EAAC,aAAa;YAAC3B,KAAK,EAAE;cAAEI,KAAK,EAAE,MAAM;cAAEwB,YAAY,EAAE;YAAO;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAExF5C,OAAA;YAAAgC,QAAA,EAAG;UAAgC;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QACzC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAGN5C,OAAA;UACI6B,KAAK,EAAE;YACHI,KAAK,EAAE,KAAK;YACZC,MAAM,EAAE,OAAO;YACfwB,SAAS,EAAE,KAAK;YAChBlB,WAAW,EAAE,KAAK;YAClBa,eAAe,EAAE,aAAa;YAC9BvB,OAAO,EAAE;UACb,CAAE;UAAAE,QAAA,eAGFhC,OAAA;YACI6B,KAAK,EAAE;cACHK,MAAM,EAAE,MAAM;cACdD,KAAK,EAAE,MAAM;cACbH,OAAO,EAAE,MAAM;cACfkB,MAAM,EAAE,MAAM;cACdW,OAAO,EAAE,MAAM;cACfC,MAAM,EAAE,MAAM;cACdC,SAAS,EAAE,YAAY;cACvBR,eAAe,EAAE;YACrB,CAAE;YACFpC,KAAK,EAAEX,SAAU;YACjBwD,QAAQ,OAAE;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC1C,EAAA,CA3HID,QAAQ;AAAA8D,EAAA,GAAR9D,QAAQ;AA6Hd,eAAeA,QAAQ;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}